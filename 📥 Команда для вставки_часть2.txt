üì• –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏

INSERT INTO DimDate (FullDate, Year, Month, Day)
SELECT DISTINCT
  TO_TIMESTAMP(timestamp)::DATE AS FullDate,
  EXTRACT(YEAR FROM TO_TIMESTAMP(timestamp))::INT,
  EXTRACT(MONTH FROM TO_TIMESTAMP(timestamp))::INT,
  EXTRACT(DAY FROM TO_TIMESTAMP(timestamp))::INT
FROM temp_ratings;

INSERT INTO DimMovie (MovieID, Title, Genre, YearReleased)
SELECT
  movieId,
  title,
  genres,
  CASE
    WHEN title ~ '\\(\\d{4}\\)$'
      THEN CAST(SUBSTRING(title FROM '\\((\\d{4})\\)$') AS INT)
    ELSE NULL
  END
FROM temp_movies
WHERE movieId NOT IN (SELECT MovieID FROM DimMovie);



INSERT INTO DimUser (UserID)
SELECT DISTINCT userId FROM temp_ratings;

INSERT INTO FactRatings (DateID, MovieID, UserID, Rating)
SELECT
  d.DateID,
  r.movieId,
  r.userId,
  r.rating
FROM temp_ratings r
JOIN DimDate d ON d.FullDate = TO_TIMESTAMP(r.timestamp)::DATE
JOIN DimMovie m ON m.MovieID = r.movieId
JOIN DimUser u ON u.UserID = r.userId;



SELECT
  dm.Title,
  COUNT(*) AS RatingCount,
  ROUND(AVG(fr.Rating)::numeric, 2) AS AvgRating
FROM FactRatings fr
JOIN DimMovie dm ON fr.MovieID = dm.MovieID
GROUP BY dm.MovieID, dm.Title
HAVING COUNT(*) >= 100
ORDER BY AvgRating DESC
LIMIT 100;



movielens_olap=# \o results1.sql
movielens_olap=# SELECT
movielens_olap-#   dm.Genre,
movielens_olap-#   dd.Year,
movielens_olap-#   COUNT(*) AS RatingCount,
movielens_olap-#   ROUND(AVG(fr.Rating)::numeric, 2) AS AvgRating
movielens_olap-# FROM FactRatings fr
movielens_olap-# JOIN DimMovie dm ON fr.MovieID = dm.MovieID
movielens_olap-# JOIN DimDate dd ON fr.DateID = dd.DateID
movielens_olap-# WHERE dd.Year BETWEEN 2000 AND 2020
movielens_olap-# GROUP BY dm.Genre, dd.Year
movielens_olap-# ORDER BY dd.Year, dm.Genre;
movielens_olap=# \o
movielens_olap=# SELECT
movielens_olap-#   fr.UserID,
movielens_olap-#   COUNT(*) AS RatingsGiven,
movielens_olap-#   ROUND(AVG(fr.Rating), 2) AS AvgUserRating
movielens_olap-# FROM FactRatings fr
movielens_olap-# GROUP BY fr.UserID
movielens_olap-# ORDER BY RatingsGiven DESC
movielens_olap-# LIMIT 100;
–û–®–ò–ë–ö–ê:  —Ñ—É–Ω–∫—Ü–∏—è round(double precision, integer) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
–°–¢–†–û–ö–ê 4:   ROUND(AVG(fr.Rating), 2) AS AvgUserRating
            ^
–ü–û–î–°–ö–ê–ó–ö–ê:  –§—É–Ω–∫—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —è–≤–Ω—ã–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤.
movielens_olap=# \o results2.sql
movielens_olap=# SELECT
movielens_olap-#   fr.UserID,
movielens_olap-#   COUNT(*) AS RatingsGiven,
movielens_olap-#   ROUND(AVG(fr.Rating)::numeric, 2) AS AvgUserRating
movielens_olap-# FROM FactRatings fr
movielens_olap-# GROUP BY fr.UserID
movielens_olap-# ORDER BY RatingsGiven DESC
movielens_olap-# LIMIT 100;
movielens_olap=# \o
movielens_olap=# SELECT
movielens_olap-#   dm.Title,
movielens_olap-#   dm.YearReleased,
movielens_olap-#   COUNT(*) AS RatingCount,
movielens_olap-#   ROUND(AVG(fr.Rating), 2) AS AvgRating
movielens_olap-# FROM FactRatings fr
movielens_olap-# JOIN DimMovie dm ON fr.MovieID = dm.MovieID
movielens_olap-# WHERE dm.YearReleased > 2010
movielens_olap-# GROUP BY dm.MovieID, dm.Title, dm.YearReleased
movielens_olap-# HAVING COUNT(*) >= 100
movielens_olap-# ORDER BY AvgRating DESC
movielens_olap-# LIMIT 50;
–û–®–ò–ë–ö–ê:  —Ñ—É–Ω–∫—Ü–∏—è round(double precision, integer) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
–°–¢–†–û–ö–ê 5:   ROUND(AVG(fr.Rating), 2) AS AvgRating

movielens_olap=# \o results4.sql
movielens_olap=# SELECT
movielens_olap-#   dd.Year,
movielens_olap-#   dd.Month,
movielens_olap-#   COUNT(*) AS RatingCount
movielens_olap-# FROM FactRatings fr
movielens_olap-# JOIN DimDate dd ON fr.DateID = dd.DateID
movielens_olap-# WHERE dd.Year BETWEEN 2015 AND 2020
movielens_olap-# GROUP BY dd.Year, dd.Month
movielens_olap-# ORDER BY dd.Year, dd.Month;
movielens_olap=# \o
  


 –°—Ü–µ–Ω–∞—Ä–∏–π 1 ‚Äì –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∂–∞–Ω—Ä–æ–≤ (2000‚Äì2020)

SELECT
  dm.Genre,
  dd.Year,
  COUNT(*) AS RatingCount,
  ROUND(AVG(fr.Rating)::numeric, 2) AS AvgRating
FROM FactRatings fr
JOIN DimMovie dm ON fr.MovieID = dm.MovieID
JOIN DimDate dd ON fr.DateID = dd.DateID
WHERE dd.Year BETWEEN 2000 AND 2020
GROUP BY dm.Genre, dd.Year
ORDER BY dd.Year, dm.Genre;

üîπ –°—Ü–µ–Ω–∞—Ä–∏–π 2 ‚Äì –¢–æ–ø-100 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

SELECT
  fr.UserID,
  COUNT(*) AS RatingsGiven,
  ROUND(AVG(fr.Rating)::numeric, 2) AS AvgUserRating
FROM FactRatings fr
GROUP BY fr.UserID
ORDER BY RatingsGiven DESC
LIMIT 100;

üîπ –°—Ü–µ–Ω–∞—Ä–∏–π 4 ‚Äì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º (2015‚Äì2020)

SELECT
  dd.Year,
  dd.Month,
  COUNT(*) AS RatingCount
FROM FactRatings fr
JOIN DimDate dd ON fr.DateID = dd.DateID
WHERE dd.Year BETWEEN 2015 AND 2020
GROUP BY dd.Year, dd.Month
ORDER BY dd.Year, dd.Month;

